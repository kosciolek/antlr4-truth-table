// @ts-nocheck
// Generated from ./TruthTables.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class TruthTablesLexer extends Lexer {
	public static readonly AND = 1;
	public static readonly OR = 2;
	public static readonly XOR = 3;
	public static readonly IMPL = 4;
	public static readonly EQUIV = 5;
	public static readonly NEG = 6;
	public static readonly VALUE = 7;
	public static readonly L_BRACKET = 8;
	public static readonly R_BRACKET = 9;
	public static readonly VAR = 10;
	public static readonly WS = 11;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"AND", "OR", "XOR", "IMPL", "EQUIV", "NEG", "VALUE", "L_BRACKET", "R_BRACKET", 
		"VAR", "WS", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", 
		"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "'('", "')'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "AND", "OR", "XOR", "IMPL", "EQUIV", "NEG", "VALUE", "L_BRACKET", 
		"R_BRACKET", "VAR", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TruthTablesLexer._LITERAL_NAMES, TruthTablesLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TruthTablesLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(TruthTablesLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TruthTables.g4"; }

	// @Override
	public get ruleNames(): string[] { return TruthTablesLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return TruthTablesLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return TruthTablesLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return TruthTablesLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\r\xC5\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x05\x05`\n\x05\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06k\n\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x05\x07r\n\x07\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\x80\n\b\x03\t\x03\t" +
		"\x03\n\x03\n\x03\v\x06\v\x87\n\v\r\v\x0E\v\x88\x03\f\x06\f\x8C\n\f\r\f" +
		"\x0E\f\x8D\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03" +
		"\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03" +
		"\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03" +
		"\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03" +
		"#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x02\x02\x02\'\x03\x02\x03\x05\x02" +
		"\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02" +
		"\v\x15\x02\f\x17\x02\r\x19\x02\x02\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02" +
		"!\x02\x02#\x02\x02%\x02\x02\'\x02\x02)\x02\x02+\x02\x02-\x02\x02/\x02" +
		"\x021\x02\x023\x02\x025\x02\x027\x02\x029\x02\x02;\x02\x02=\x02\x02?\x02" +
		"\x02A\x02\x02C\x02\x02E\x02\x02G\x02\x02I\x02\x02K\x02\x02\x03\x02\x1E" +
		"\x04\x02C\\c|\x05\x02\v\f\x0F\x0F\"\"\x04\x02CCcc\x04\x02DDdd\x04\x02" +
		"EEee\x04\x02FFff\x04\x02GGgg\x04\x02HHhh\x04\x02IIii\x04\x02JJjj\x04\x02" +
		"KKkk\x04\x02LLll\x04\x02MMmm\x04\x02NNnn\x04\x02OOoo\x04\x02PPpp\x04\x02" +
		"QQqq\x04\x02RRrr\x04\x02SSss\x04\x02TTtt\x04\x02UUuu\x04\x02VVvv\x04\x02" +
		"WWww\x04\x02XXxx\x04\x02YYyy\x04\x02ZZzz\x04\x02[[{{\x04\x02\\\\||\x02" +
		"\xB1\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02" +
		"\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02" +
		"\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
		"\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x03M\x03\x02\x02\x02" +
		"\x05Q\x03\x02\x02\x02\x07T\x03\x02\x02\x02\t_\x03\x02\x02\x02\vj\x03\x02" +
		"\x02\x02\rq\x03\x02\x02\x02\x0F\x7F\x03\x02\x02\x02\x11\x81\x03\x02\x02" +
		"\x02\x13\x83\x03\x02\x02\x02\x15\x86\x03\x02\x02\x02\x17\x8B\x03\x02\x02" +
		"\x02\x19\x91\x03\x02\x02\x02\x1B\x93\x03\x02\x02\x02\x1D\x95\x03\x02\x02" +
		"\x02\x1F\x97\x03\x02\x02\x02!\x99\x03\x02\x02\x02#\x9B\x03\x02\x02\x02" +
		"%\x9D\x03\x02\x02\x02\'\x9F\x03\x02\x02\x02)\xA1\x03\x02\x02\x02+\xA3" +
		"\x03\x02\x02\x02-\xA5\x03\x02\x02\x02/\xA7\x03\x02\x02\x021\xA9\x03\x02" +
		"\x02\x023\xAB\x03\x02\x02\x025\xAD\x03\x02\x02\x027\xAF\x03\x02\x02\x02" +
		"9\xB1\x03\x02\x02\x02;\xB3\x03\x02\x02\x02=\xB5\x03\x02\x02\x02?\xB7\x03" +
		"\x02\x02\x02A\xB9\x03\x02\x02\x02C\xBB\x03\x02\x02\x02E\xBD\x03\x02\x02" +
		"\x02G\xBF\x03\x02\x02\x02I\xC1\x03\x02\x02\x02K\xC3\x03\x02\x02\x02MN" +
		"\x05\x19\r\x02NO\x053\x1A\x02OP\x05\x1F\x10\x02P\x04\x03\x02\x02\x02Q" +
		"R\x055\x1B\x02RS\x05;\x1E\x02S\x06\x03\x02\x02\x02TU\x05G$\x02UV\x055" +
		"\x1B\x02VW\x05;\x1E\x02W\b\x03\x02\x02\x02XY\x05)\x15\x02YZ\x051\x19\x02" +
		"Z[\x057\x1C\x02[\\\x05/\x18\x02\\`\x03\x02\x02\x02]^\x07?\x02\x02^`\x07" +
		"@\x02\x02_X\x03\x02\x02\x02_]\x03\x02\x02\x02`\n\x03\x02\x02\x02ab\x05" +
		"!\x11\x02bc\x059\x1D\x02cd\x05A!\x02de\x05)\x15\x02ef\x05C\"\x02fk\x03" +
		"\x02\x02\x02gh\x07>\x02\x02hi\x07?\x02\x02ik\x07@\x02\x02ja\x03\x02\x02" +
		"\x02jg\x03\x02\x02\x02k\f\x03\x02\x02\x02lm\x053\x1A\x02mn\x05!\x11\x02" +
		"no\x05%\x13\x02or\x03\x02\x02\x02pr\x07\x80\x02\x02ql\x03\x02\x02\x02" +
		"qp\x03\x02\x02\x02r\x0E\x03\x02\x02\x02st\x05? \x02tu\x05;\x1E\x02uv\x05" +
		"A!\x02vw\x05!\x11\x02w\x80\x03\x02\x02\x02xy\x05#\x12\x02yz\x05\x19\r" +
		"\x02z{\x05/\x18\x02{|\x05=\x1F\x02|}\x05!\x11\x02}\x80\x03\x02\x02\x02" +
		"~\x80\x0423\x02\x7Fs\x03\x02\x02\x02\x7Fx\x03\x02\x02\x02\x7F~\x03\x02" +
		"\x02\x02\x80\x10\x03\x02\x02\x02\x81\x82\x07*\x02\x02\x82\x12\x03\x02" +
		"\x02\x02\x83\x84\x07+\x02\x02\x84\x14\x03\x02\x02\x02\x85\x87\t\x02\x02" +
		"\x02\x86\x85\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88\x86\x03\x02\x02" +
		"\x02\x88\x89\x03\x02\x02\x02\x89\x16\x03\x02\x02\x02\x8A\x8C\t\x03\x02" +
		"\x02\x8B\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8B\x03\x02\x02" +
		"\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x90\b\f\x02\x02" +
		"\x90\x18\x03\x02\x02\x02\x91\x92\t\x04\x02\x02\x92\x1A\x03\x02\x02\x02" +
		"\x93\x94\t\x05\x02\x02\x94\x1C\x03\x02\x02\x02\x95\x96\t\x06\x02\x02\x96" +
		"\x1E\x03\x02\x02\x02\x97\x98\t\x07\x02\x02\x98 \x03\x02\x02\x02\x99\x9A" +
		"\t\b\x02\x02\x9A\"\x03\x02\x02\x02\x9B\x9C\t\t\x02\x02\x9C$\x03\x02\x02" +
		"\x02\x9D\x9E\t\n\x02\x02\x9E&\x03\x02\x02\x02\x9F\xA0\t\v\x02\x02\xA0" +
		"(\x03\x02\x02\x02\xA1\xA2\t\f\x02\x02\xA2*\x03\x02\x02\x02\xA3\xA4\t\r" +
		"\x02\x02\xA4,\x03\x02\x02\x02\xA5\xA6\t\x0E\x02\x02\xA6.\x03\x02\x02\x02" +
		"\xA7\xA8\t\x0F\x02\x02\xA80\x03\x02\x02\x02\xA9\xAA\t\x10\x02\x02\xAA" +
		"2\x03\x02\x02\x02\xAB\xAC\t\x11\x02\x02\xAC4\x03\x02\x02\x02\xAD\xAE\t" +
		"\x12\x02\x02\xAE6\x03\x02\x02\x02\xAF\xB0\t\x13\x02\x02\xB08\x03\x02\x02" +
		"\x02\xB1\xB2\t\x14\x02\x02\xB2:\x03\x02\x02\x02\xB3\xB4\t\x15\x02\x02" +
		"\xB4<\x03\x02\x02\x02\xB5\xB6\t\x16\x02\x02\xB6>\x03\x02\x02\x02\xB7\xB8" +
		"\t\x17\x02\x02\xB8@\x03\x02\x02\x02\xB9\xBA\t\x18\x02\x02\xBAB\x03\x02" +
		"\x02\x02\xBB\xBC\t\x19\x02\x02\xBCD\x03\x02\x02\x02\xBD\xBE\t\x1A\x02" +
		"\x02\xBEF\x03\x02\x02\x02\xBF\xC0\t\x1B\x02\x02\xC0H\x03\x02\x02\x02\xC1" +
		"\xC2\t\x1C\x02\x02\xC2J\x03\x02\x02\x02\xC3\xC4\t\x1D\x02\x02\xC4L\x03" +
		"\x02\x02\x02\t\x02_jq\x7F\x88\x8D\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TruthTablesLexer.__ATN) {
			TruthTablesLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TruthTablesLexer._serializedATN));
		}

		return TruthTablesLexer.__ATN;
	}

}

